Given input array of integers in sorted order and target integer, find start and end position of target in input array.
Sample-
1. [1,2,3,8,8],target=8
sol: [3,4]
2. [1,2,3,4],target=7
sol:[-1,-1]
Execution time:O(log n)

Code:Java

	public static int[] searchRange(int[] nums, int target) {
		int end = nums.length;
		int start = 0;
		int startPos = -1;
		int endPos = -1;

		while (start <= end) {
			int mid = (start + end) / 2;

			if (target == nums[mid]) {
				startPos = mid;
				endPos = mid;

				int tmp = findVal(start, mid, nums, target, mid, "lower");
				if (tmp != -1 && tmp < startPos)
					startPos = tmp;
				tmp = findVal(mid, end, nums, target, mid, "higher");
				if (tmp != -1 && endPos < tmp)
					endPos = tmp;
				break;

			} else if (target < nums[mid]) {

				end = mid - 1;
			} else {
				start = mid + 1;
			}

		}
		int[] posTarget = new int[2];
		posTarget[0] = startPos;
		posTarget[1] = endPos;
		return posTarget;
	}

	public static int findVal(int start, int end, int[] nums, int target, int pos, String dir) {

		if (start > end) {
			return pos;
		}
		int mid = (end + start) / 2;

		if (mid < nums.length) {
			if (target == nums[mid]) {
				pos = mid;
				if (dir.equals("lower")) {
					int x = findVal(start, mid - 1, nums, target, pos, dir);
					if (x < pos)
						pos = x;
				} else {
					int x = findVal(mid + 1, end, nums, target, pos, dir);
					if (x > pos)
						pos = x;
				}
				return pos;
			} else if (nums[mid] < target && dir.equals("lower")) {
				int x = findVal(mid + 1, end, nums, target, pos, dir);
				if (x < pos)
					pos = x;

			} else if (nums[mid] > target && dir.equals("higher")) {

				int x = findVal(start, mid - 1, nums, target, pos, dir);
				if (x > pos)
					pos = x;
			}
		}
		return pos;

	}

